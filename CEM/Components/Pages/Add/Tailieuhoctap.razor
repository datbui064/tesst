@page "/TaiLieuHocTap"
@using CEM.Models
@inject QlbContext _context
@inject NotificationService Notification
@inject MinIOService MinIOService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="app.css">
    <link href="_content/Radzen.Blazor/css/default.css" rel="stylesheet">
</head>

<h2>Tài Liệu Học Tập</h2>
<div class="container">
    <div class="form-container">
        <!-- Mã Bài Giảng -->
        <div class="form-group">
            <label>Mã Bài Giảng:</label>
            <input type="text" @bind="MaBaiGiang" class="form-control" disabled />
        </div>

        <!-- Mã Tài Liệu -->
        <div class="form-group">
            <label>Mã Tài Liệu:</label>
            <input type="text" @bind="taiLieu.MaTaiLieu" class="form-control" />
        </div>

        <!-- Tên Tài Liệu -->
        <div class="form-group">
            <label>Tên Tài Liệu:</label>
            <input type="text" @bind="taiLieu.TenTaiLieu"  />
        </div>

        <!-- Tác Giả -->
        <div class="form-group">
            <label>Tác Giả:</label>
            <input type="text" @bind="taiLieu.TacGia" class="form-control" />
        </div>



        <!-- Năm Xuất Bản -->
        
        <div class="form-group">

            <label>Năm Xuất Bản:</label>
            <input type="date" class="input-field" @bind="taiLieu.NamXuatBan" />
        </div>
       

        <!-- Nhà Xuất Bản -->
        <div class="form-group">
            <label>Nhà Xuất Bản:</label>
            <input type="text" @bind="taiLieu.NhaXuatBan" class="form-control" />
        </div>

        <!-- Loại Tài Liệu -->
        <div class="form-group">
            <label>Loại Tài Liệu:</label>
            <input type="text" @bind="taiLieu.LoaiTaiLieu" class="form-control" />
        </div>

        <!-- Đường Dẫn Tài Liệu -->
        <div class="form-group">
            <label>Đường Dẫn Tài Liệu:</label>
            <input type="text" @bind="taiLieu.DuongDan" class="form-control" />
        </div>

        <!-- File Đính Kèm -->
        <div class="form-group">
            <label>File Đính Kèm:</label>
            <InputFile class="input-field" OnChange="@HandleFileSelected" />
        </div>

        <p class="status-message">@statusMessage</p>

        <!-- Nút Lưu -->
        <div class="form-group text-right">
            <button class="submit-button" @onclick="Save">Lưu Dữ Liệu</button>
            <button class="close-button" @onclick="Close">Đóng</button>
        </div>
    </div>
</div>

@code {
    private TaiLieuHocTap taiLieu = new TaiLieuHocTap();
    private MemoryStream memoryStream; // Bộ nhớ tạm
    private string? fileName;
    private string? statusMessage;
    private string MaBaiGiang;
    private const string SelectedBucket = "tailieu";

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        MaBaiGiang = queryParams["MaBaiGiang"];

        if (string.IsNullOrEmpty(MaBaiGiang))
        {
            NavigationManager.NavigateTo("/danhsach");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                fileName = file.Name;
                memoryStream = new MemoryStream();
                await file.OpenReadStream(10 * 1024 * 1024).CopyToAsync(memoryStream); // Copy dữ liệu vào bộ nhớ tạm
                memoryStream.Position = 0; // Reset vị trí stream
                statusMessage = $"Đã chọn file: {fileName}";
            }
            catch (Exception ex)
            {
                statusMessage = $"Lỗi khi xử lý file: {ex.Message}";
                Console.WriteLine(statusMessage);
            }
        }
    }

    private async Task Save()
    {
        if (memoryStream == null || string.IsNullOrEmpty(fileName))
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Cảnh báo",
                    Detail = "Vui lòng chọn một tệp để tải lên.",
                    Duration = 4000
                });
            return;
        }

        try
        {
            var maNguoiDungString = await _localStorageService.GetItemAsync<string>("maNguoiDung");
            if (string.IsNullOrEmpty(maNguoiDungString) || !int.TryParse(maNguoiDungString, out int maNguoiDungInt))
            {
                throw new Exception("Không tìm thấy hoặc mã người dùng không hợp lệ.");
            }

           
            taiLieu.MaBaiGiang = MaBaiGiang;

            // Upload file lên MinIO
            memoryStream.Position = 0; // Đảm bảo vị trí của stream bắt đầu từ đầu
            var uploadSuccess = await MinIOService.UploadFileAsync(memoryStream, fileName, SelectedBucket);

            if (!uploadSuccess)
            {
                throw new Exception("Upload file thất bại.");
            }

            taiLieu.FileName = fileName;
            taiLieu.BucketName = SelectedBucket;

            // Lưu thông tin vào database
            await _context.TaiLieuHocTaps.AddAsync(taiLieu);
            await _context.SaveChangesAsync();

            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Thành công",
                    Detail = "Phương Tiện Công Cụ đã được lưu.",
                    Duration = 4000
                });

            NavigationManager.NavigateTo("/danhsach");
        }
        catch (Exception ex)
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Lỗi",
                    Detail = $"Có lỗi xảy ra: {ex.Message}",
                    Duration = 4000
                });
        }
        finally
        {
            memoryStream?.Dispose(); // Giải phóng tài nguyên
        }
    }

    private void Close()
    {
        NavigationManager.NavigateTo("/danhsach");
    }
}
