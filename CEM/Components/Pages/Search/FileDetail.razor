
@page "/FileDetail"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject MinIOService MinIOService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<link href="_content/Radzen.Blazor/css/default.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

<style>


    h3 {
        color: #3498db;
        margin-bottom: 15px;
        text-align: center; /* Căn giữa tiêu đề */
    }

    .info {
        background-color: #ffffff;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        margin-bottom: 20px;
        transition: transform 0.3s; /* Hiệu ứng 3D */
    }

        .info:hover {
            transform: translateY(-5px); /* Nhấc lên khi hover */
        }

    .text-danger {
        color: #e74c3c;
        text-align: center; /* Căn giữa thông báo lỗi */
    }

    .btn-download {
        display: inline-flex;
        align-items: center;
        padding: 10px 20px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s; /* Hiệu ứng chuyển động */
        margin: 0 auto; /* Căn giữa nút */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Đổ bóng */
    }

        .btn-download:hover {
            background-color: #2980b9;
            transform: translateY(-2px); /* Nhấc lên khi hover */
        }

        .btn-download i {
            margin-right: 5px; /* Khoảng cách giữa biểu tượng và văn bản */
        }

    .content-container {
        display: flex;
        flex-direction: column;
        align-items: center; /* Căn giữa nội dung */
    }

    .editor-container {
        width: 100%;
        max-width: 800px; /* Giới hạn chiều rộng */
        margin-top: 10px;
    }
</style>

<h3><i class="fas fa-file-alt"></i> Thông Tin File</h3>

<div class="content-container">
    <div class="info">
        <p><strong>Tên File:</strong> @FileName</p>
        <p><strong>Bucket:</strong> @BucketName</p>
    </div>

    <h3>Nội dung file Word</h3>

    @if (isLoading)
    {
        <p>Đang tải...</p>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
    else
    {
        <div class="editor-container">
            <RadzenHtmlEditor @bind-Value="fileContent" ReadOnly="true" Style="height: 400px;" />
        </div>
    }

    <button class="btn-download" @onclick="DownloadFile">
        <i class="fas fa-download"></i> Tải File
    </button>
</div>

@code {
    public string FileName { get; set; }
    public string BucketName { get; set; }
    private string fileContent;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = NavigationManager.Uri;
            var queryParams = QueryHelpers.ParseQuery(new Uri(uri).Query);

            if (queryParams.TryGetValue("fileName", out var fileName))
                FileName = fileName;
            if (queryParams.TryGetValue("bucketName", out var bucketName))
                BucketName = bucketName;

            if (string.IsNullOrEmpty(FileName) || string.IsNullOrEmpty(BucketName))
            {
                errorMessage = "Thông tin file hoặc bucket không hợp lệ.";
                return;
            }

            // Chuyển đổi file Word sang HTML
            fileContent = await MinIOService.ConvertWordToHtmlAsync(BucketName, FileName);
        }
        catch (Exception ex)
        {
            errorMessage = "Không thể tải nội dung file. Vui lòng thử lại.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DownloadFile()
    {
        try
        {
            var fileUrl = MinIOService.GetPreSignedUrl(BucketName, FileName);
            fileUrl = fileUrl.Replace("https://", "http://");
            await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, FileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }
}
